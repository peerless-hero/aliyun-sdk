// Generated by @peerless_hero/aliyun-sdk
import { BaseClient, type BaseClientConfig } from '../client'

export namespace <%- PREFIX %> {
  /**
   * `<%- api.info.product %>`可用端点
   */
  export type Endpoint = <% for (let i = 0; i < api.endpoints.length; i++) { -%>'<%- api.endpoints[i].endpoint %>'<% if (i < api.endpoints.length - 1) { -%> | <% } -%><% } -%>

  /**
   * `<%- api.info.product %>` 配置
   */
  export type ClientConfig = Omit<BaseClientConfig, 'RPC' | 'version'> & { endpoint?: Endpoint }
<% for(const name in api.components.schemas) { -%>
<% if (name!== 'Endpoint') { -%>
<%- include('doc.ejs', { schema: api.components.schemas[name] }) %>
export type <%- name %> = <%- include('schema.ejs', { schema: api.components.schemas[name] }) %>
<% } -%>
<% } -%>
<% for(const action in api.apis) { -%>
  export type <%- action %>Parameters = {
<% for (const parameter of filterParameters(api.apis[action].parameters)) { -%>
<%- include('doc.ejs', { schema: parameter.schema }) %>
  <%- include('name.ejs', parameter) %><% if (!parameter.schema?.required) { %>?<% } %>: <%- include('schema.ejs', { schema: parameter.schema }) %>
<% } -%>
  }
  export type <%- action %>Data = <%- include('schema.ejs', { schema: api.apis[action].responses['200']?.schema }) %> 
<% } -%>
}

/**
 * <%- name %>
 *
 * @version <%- api.info.version %>
 * @link https://api.aliyun.com/document/<%- api.info.product %>/<%- api.info.version %>/overview
 */
export class <%- PREFIX %>Client extends BaseClient {
  readonly RPC = <%- RPC %> as const
  readonly version = '<%- api.info.version %>' as const
  constructor({ endpoint = '<%- api.endpoints[0].endpoint %>', accessKeyId, accessKeySecret }: <%- PREFIX %>.ClientConfig = {}) {
    super({ endpoint, accessKeyId, accessKeySecret })
  }

  /**
   * 切换Endpoint
   */
  setEndpoint(endpoint: <%- PREFIX %>.Endpoint) {
    this.endpoint = endpoint
  }
<% if (RPC) { %>
<% for(const action in api.apis) { -%>
  /**
<% if (api.apis[action].deprecated) { -%>
   * @deprecated
   *
<% } -%>
   * <%- api.apis[action].summary %>
   */
  <%- action %>(parameters: <%- PREFIX %>.<%- action %>Parameters<% if(notRequireParameters(api.apis[action].parameters)){ %> = {}<% } %>) {
    return this.fetch<<%- PREFIX %>.<%- action %>Data>({
      action: '<%- action %>',
      method: 'POST',
      data: parameters,
    })
  }
<% } -%>
<% } else { -%>
<% for(const action in api.apis) { -%>
  <%- action %>(
<% for (const parameter of api.apis[action].parameters) { -%>
<% if (parameter.in==='path') { -%>
<%- include('doc.ejs', { schema: parameter.schema, space: '    ' }) %>
    <%- parameter.name %>: <%- include('schema.ejs', { schema: parameter.schema, space: '    ' }) -%>,
<% } -%>
<% } -%>
    parameters<% if(notRequireParameters(api.apis[action].parameters)){ %>?<% } %>: <%- PREFIX %>.<%- action %>Parameters,
  ) {
    return this.fetch<<%- PREFIX %>.<%- action %>Data>({
      action: '<%- action %>',
<%if (api.apis[action].path?.includes('{')) { -%> 
      url:`<%- api.apis[action].path.replace(/{/g, '${') %>`,
<% } else { -%>
      url: '<%- api.apis[action].path %>',
<% } -%>
      method: '<%- api.apis[action].methods[0] %>',
<%if (api.apis[action].methods[0] === 'get') { -%>
      params: parameters,
<% } else { -%>
      data: parameters,
<% } -%>
    })
  }
<% } -%>
<% } -%>
}
