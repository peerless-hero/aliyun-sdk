// Generated by @peerless_hero/aliyun-sdk
<% if (RPC) { -%>
import { stringify } from 'fast-querystring'
<% } -%>
import { BaseClient, type BaseClientConfig } from '../client'

export namespace <%- PREFIX %> {
  /**
  * `<%- api.info.product %>`可用端点
  */
  export type Endpoint = <% for (let i = 0; i < api.endpoints.length; i++) { -%>'<%- api.endpoints[i].endpoint %>'<% if (i < api.endpoints.length - 1) { -%> | <% } -%><% } -%>
  /**
  * `<%- api.info.product %>`客户端配置
  */
  export type ClientConfig = BaseClientConfig & { endpoint?: Endpoint }
<% for(const name in api.components.schemas) { -%>
<%- include('doc.ejs', { schema: api.components.schemas[name] }) %>
type <%- name %> = <%- include('schema.ejs', { schema: api.components.schemas[name] }) %>
<% } -%>
<% for(const action in api.apis) { -%>
  export type <%- action %>Parameters = {
<% for (const parameter of filterParameters(api.apis[action].parameters)) { -%>
<%- include('doc.ejs', { schema: parameter.schema }) %>
  <%- include('name.ejs', parameter) %>: <%- include('schema.ejs', { schema: parameter.schema }) %>
<% } -%>
  }
  export type <%- action %>Data = <%- include('schema.ejs', { schema: api.apis[action].responses['200']?.schema }) %> 
<% } -%>
}

/**
* `<%- api.info.product %>`客户端
*/
export class <%- PREFIX %>Client extends BaseClient {
  static readonly RPC = <%- RPC %>
  static readonly version = '<%- api.info.version %>'
  constructor(config: <%- PREFIX %>.ClientConfig = {}) {
    super(config)
    const { endpoint = '<%- api.endpoints[0].endpoint %>' } = config
    this.setEndpoint(endpoint)
  }

  /**
   * 切换Endpoint
   */
  setEndpoint(endpoint: <%- PREFIX %>.Endpoint) {
    this.endpoint = endpoint
    this.request.defaults.baseURL = `https://${endpoint}`
  }
<% if (RPC) { %>
<% for(const action in api.apis) { -%>
  /**
<% if (api.apis[action].deprecated) { -%>
   * @deprecated
   *
<% } -%>
   * <%- api.apis[action].summary %>
   */
  async <%- action %>(parameters: <%- PREFIX %>.<%- action %>Parameters) {
    const res = await this.fetch(
      '<%- action %>',
      {
        url: '<%- action %>',
        method: 'POST',
        data: stringify(parameters),
      },
    )
    return res.data as <%- PREFIX %>.<%- action %>Data
  }
<% } -%>
<% } else { -%>
<% for(const action in api.apis) { -%>
  async <%- action %>(
<% for (const parameter of api.apis[action].parameters) { -%>
<% if (parameter.in==='path') { -%>
<%- include('doc.ejs', { schema: parameter.schema, space: '    ' }) %>
    <%- parameter.name %>: <%- include('schema.ejs', { schema: parameter.schema, space: '    ' }) -%>,
<% } -%>
<% } -%>
    parameters: <%- PREFIX %>.<%- action %>Parameters,
  ) {
    const res = await this.fetch(
      '<%- action %>',
      {
<%if (api.apis[action].path?.includes('{')) { -%> 
        url:`<%- api.apis[action].path.replace(/{/g, '${') %>`,
<% } else { -%>
        url: '<%- api.apis[action].path %>',
<% } -%>
        method: '<%- api.apis[action].methods[0] %>',
<%if (api.apis[action].methods[0] === 'get') { -%>
        params: parameters,
<% } else { -%>
        data: parameters,
<% } -%>
      },
    )
    return res.data as <%- PREFIX %>.<%- action %>Data
  }
<% } -%>
<% } -%>
}
